/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.course.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JsonQGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class JSONQueryModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.course.JsonQ.JSONQueryModel");
		private final Assignment cInputStatementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInputStatementStatementsParserRuleCall_0 = (RuleCall)cInputStatementAssignment.eContents().get(0);
		
		//JSONQueryModel:
		//    (inputStatement+=Statements)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(inputStatement+=Statements)*
		public Assignment getInputStatementAssignment() { return cInputStatementAssignment; }
		
		//Statements
		public RuleCall getInputStatementStatementsParserRuleCall_0() { return cInputStatementStatementsParserRuleCall_0; }
	}
	public class StatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.course.JsonQ.Statements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationOperationEnumRuleCall_1_0 = (RuleCall)cOperationAssignment_1.eContents().get(0);
		private final Keyword cFORKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQ1keyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQ1keyInputFieldSingleEnumRuleCall_3_0 = (RuleCall)cQ1keyAssignment_3.eContents().get(0);
		private final Assignment cQ1valAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQ1valInputValParserRuleCall_4_0 = (RuleCall)cQ1valAssignment_4.eContents().get(0);
		private final Assignment cConnectorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cConnectorAlternatives_5_0 = (Alternatives)cConnectorAssignment_5.eContents().get(0);
		private final Keyword cConnectorANDKeyword_5_0_0 = (Keyword)cConnectorAlternatives_5_0.eContents().get(0);
		private final Keyword cConnectorORKeyword_5_0_1 = (Keyword)cConnectorAlternatives_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cQ2keyAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cQ2keyInputFieldSingleEnumRuleCall_6_0_0 = (RuleCall)cQ2keyAssignment_6_0.eContents().get(0);
		private final Assignment cQ2valAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cQ2valInputValParserRuleCall_6_1_0 = (RuleCall)cQ2valAssignment_6_1.eContents().get(0);
		
		//Statements:
		//    'GET' operation=Operation 'FOR' q1key=InputFieldSingle q1val=InputVal (connector+=('AND'|'OR'))? (q2key=InputFieldSingle q2val=InputVal)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'GET' operation=Operation 'FOR' q1key=InputFieldSingle q1val=InputVal (connector+=('AND'|'OR'))? (q2key=InputFieldSingle q2val=InputVal)?
		public Group getGroup() { return cGroup; }
		
		//'GET'
		public Keyword getGETKeyword_0() { return cGETKeyword_0; }
		
		//operation=Operation
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//Operation
		public RuleCall getOperationOperationEnumRuleCall_1_0() { return cOperationOperationEnumRuleCall_1_0; }
		
		//'FOR'
		public Keyword getFORKeyword_2() { return cFORKeyword_2; }
		
		//q1key=InputFieldSingle
		public Assignment getQ1keyAssignment_3() { return cQ1keyAssignment_3; }
		
		//InputFieldSingle
		public RuleCall getQ1keyInputFieldSingleEnumRuleCall_3_0() { return cQ1keyInputFieldSingleEnumRuleCall_3_0; }
		
		//q1val=InputVal
		public Assignment getQ1valAssignment_4() { return cQ1valAssignment_4; }
		
		//InputVal
		public RuleCall getQ1valInputValParserRuleCall_4_0() { return cQ1valInputValParserRuleCall_4_0; }
		
		//(connector+=('AND'|'OR'))?
		public Assignment getConnectorAssignment_5() { return cConnectorAssignment_5; }
		
		//('AND'|'OR')
		public Alternatives getConnectorAlternatives_5_0() { return cConnectorAlternatives_5_0; }
		
		//'AND'
		public Keyword getConnectorANDKeyword_5_0_0() { return cConnectorANDKeyword_5_0_0; }
		
		//'OR'
		public Keyword getConnectorORKeyword_5_0_1() { return cConnectorORKeyword_5_0_1; }
		
		//(q2key=InputFieldSingle q2val=InputVal)?
		public Group getGroup_6() { return cGroup_6; }
		
		//q2key=InputFieldSingle
		public Assignment getQ2keyAssignment_6_0() { return cQ2keyAssignment_6_0; }
		
		//InputFieldSingle
		public RuleCall getQ2keyInputFieldSingleEnumRuleCall_6_0_0() { return cQ2keyInputFieldSingleEnumRuleCall_6_0_0; }
		
		//q2val=InputVal
		public Assignment getQ2valAssignment_6_1() { return cQ2valAssignment_6_1; }
		
		//InputVal
		public RuleCall getQ2valInputValParserRuleCall_6_1_0() { return cQ2valInputValParserRuleCall_6_1_0; }
	}
	public class InputValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.course.JsonQ.InputVal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InputVal:
		//    INTLiteral | StringLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INTLiteral | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INTLiteral
		public RuleCall getINTLiteralParserRuleCall_0() { return cINTLiteralParserRuleCall_0; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.course.JsonQ.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//    value = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class INTLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.course.JsonQ.INTLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//INTLiteral:
		//    value = INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	
	public class OperationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.course.JsonQ.Operation");
		private final EnumLiteralDeclaration cDATAEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDATADATAKeyword_0 = (Keyword)cDATAEnumLiteralDeclaration.eContents().get(0);
		
		//enum Operation:
		//    DATA
		//;
		public EnumRule getRule() { return rule; }
		
		//DATA
		public EnumLiteralDeclaration getDATAEnumLiteralDeclaration() { return cDATAEnumLiteralDeclaration; }
		
		public Keyword getDATADATAKeyword_0() { return cDATADATAKeyword_0; }
	}
	public class InputFieldSingleElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.course.JsonQ.InputFieldSingle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAreaTypeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAreaTypeAreaTypeKeyword_0_0 = (Keyword)cAreaTypeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAreaNameEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAreaNameAreaNameKeyword_1_0 = (Keyword)cAreaNameEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAreaCodeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAreaCodeAreaCodeKeyword_2_0 = (Keyword)cAreaCodeEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum InputFieldSingle:
		//    areaType = 'areaType' |
		//    areaName = 'areaName' |
		//    areaCode = 'areaCode'
		//;
		public EnumRule getRule() { return rule; }
		
		//areaType = 'areaType' |
		//areaName = 'areaName' |
		//areaCode = 'areaCode'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//areaType = 'areaType'
		public EnumLiteralDeclaration getAreaTypeEnumLiteralDeclaration_0() { return cAreaTypeEnumLiteralDeclaration_0; }
		
		//'areaType'
		public Keyword getAreaTypeAreaTypeKeyword_0_0() { return cAreaTypeAreaTypeKeyword_0_0; }
		
		//areaName = 'areaName'
		public EnumLiteralDeclaration getAreaNameEnumLiteralDeclaration_1() { return cAreaNameEnumLiteralDeclaration_1; }
		
		//'areaName'
		public Keyword getAreaNameAreaNameKeyword_1_0() { return cAreaNameAreaNameKeyword_1_0; }
		
		//areaCode = 'areaCode'
		public EnumLiteralDeclaration getAreaCodeEnumLiteralDeclaration_2() { return cAreaCodeEnumLiteralDeclaration_2; }
		
		//'areaCode'
		public Keyword getAreaCodeAreaCodeKeyword_2_0() { return cAreaCodeAreaCodeKeyword_2_0; }
	}
	
	private final JSONQueryModelElements pJSONQueryModel;
	private final StatementsElements pStatements;
	private final InputValElements pInputVal;
	private final StringLiteralElements pStringLiteral;
	private final INTLiteralElements pINTLiteral;
	private final OperationElements eOperation;
	private final InputFieldSingleElements eInputFieldSingle;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JsonQGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJSONQueryModel = new JSONQueryModelElements();
		this.pStatements = new StatementsElements();
		this.pInputVal = new InputValElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pINTLiteral = new INTLiteralElements();
		this.eOperation = new OperationElements();
		this.eInputFieldSingle = new InputFieldSingleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.course.JsonQ".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//JSONQueryModel:
	//    (inputStatement+=Statements)*;
	public JSONQueryModelElements getJSONQueryModelAccess() {
		return pJSONQueryModel;
	}
	
	public ParserRule getJSONQueryModelRule() {
		return getJSONQueryModelAccess().getRule();
	}
	
	//Statements:
	//    'GET' operation=Operation 'FOR' q1key=InputFieldSingle q1val=InputVal (connector+=('AND'|'OR'))? (q2key=InputFieldSingle q2val=InputVal)?
	//;
	public StatementsElements getStatementsAccess() {
		return pStatements;
	}
	
	public ParserRule getStatementsRule() {
		return getStatementsAccess().getRule();
	}
	
	//InputVal:
	//    INTLiteral | StringLiteral
	//;
	public InputValElements getInputValAccess() {
		return pInputVal;
	}
	
	public ParserRule getInputValRule() {
		return getInputValAccess().getRule();
	}
	
	//StringLiteral:
	//    value = STRING
	//;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//INTLiteral:
	//    value = INT
	//;
	public INTLiteralElements getINTLiteralAccess() {
		return pINTLiteral;
	}
	
	public ParserRule getINTLiteralRule() {
		return getINTLiteralAccess().getRule();
	}
	
	//enum Operation:
	//    DATA
	//;
	public OperationElements getOperationAccess() {
		return eOperation;
	}
	
	public EnumRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//enum InputFieldSingle:
	//    areaType = 'areaType' |
	//    areaName = 'areaName' |
	//    areaCode = 'areaCode'
	//;
	public InputFieldSingleElements getInputFieldSingleAccess() {
		return eInputFieldSingle;
	}
	
	public EnumRule getInputFieldSingleRule() {
		return getInputFieldSingleAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
