/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.course.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.course.jsonQ.AdditionalQuery;
import uk.ac.kcl.course.jsonQ.AggregateStatements;
import uk.ac.kcl.course.jsonQ.GetStatements;
import uk.ac.kcl.course.jsonQ.JSONQueryModel;
import uk.ac.kcl.course.jsonQ.JsonQPackage;
import uk.ac.kcl.course.jsonQ.StringLiteral;
import uk.ac.kcl.course.services.JsonQGrammarAccess;

@SuppressWarnings("all")
public class JsonQSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JsonQGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JsonQPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonQPackage.ADDITIONAL_QUERY:
				sequence_AdditionalQuery(context, (AdditionalQuery) semanticObject); 
				return; 
			case JsonQPackage.AGGREGATE_STATEMENTS:
				sequence_AggregateStatements(context, (AggregateStatements) semanticObject); 
				return; 
			case JsonQPackage.GET_STATEMENTS:
				sequence_GetStatements(context, (GetStatements) semanticObject); 
				return; 
			case JsonQPackage.JSON_QUERY_MODEL:
				sequence_JSONQueryModel(context, (JSONQueryModel) semanticObject); 
				return; 
			case JsonQPackage.STRING_LITERAL:
				sequence_StringLiteral(context, (StringLiteral) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AdditionalQuery returns AdditionalQuery
	 *
	 * Constraint:
	 *     (connector=Connector q2key=InputFieldSingle q2val=InputVal)
	 */
	protected void sequence_AdditionalQuery(ISerializationContext context, AdditionalQuery semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonQPackage.Literals.ADDITIONAL_QUERY__CONNECTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonQPackage.Literals.ADDITIONAL_QUERY__CONNECTOR));
			if (transientValues.isValueTransient(semanticObject, JsonQPackage.Literals.ADDITIONAL_QUERY__Q2KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonQPackage.Literals.ADDITIONAL_QUERY__Q2KEY));
			if (transientValues.isValueTransient(semanticObject, JsonQPackage.Literals.ADDITIONAL_QUERY__Q2VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonQPackage.Literals.ADDITIONAL_QUERY__Q2VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditionalQueryAccess().getConnectorConnectorEnumRuleCall_0_0(), semanticObject.getConnector());
		feeder.accept(grammarAccess.getAdditionalQueryAccess().getQ2keyInputFieldSingleEnumRuleCall_1_0(), semanticObject.getQ2key());
		feeder.accept(grammarAccess.getAdditionalQueryAccess().getQ2valInputValParserRuleCall_2_0(), semanticObject.getQ2val());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statements returns AggregateStatements
	 *     AggregateStatements returns AggregateStatements
	 *
	 * Constraint:
	 *     (opAgg=OperationAgg aggField=InputFieldSingle q1key=InputFieldSingle q1val=InputVal qryadditional=AdditionalQuery?)
	 */
	protected void sequence_AggregateStatements(ISerializationContext context, AggregateStatements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statements returns GetStatements
	 *     GetStatements returns GetStatements
	 *
	 * Constraint:
	 *     (opGet=OperationGET q1key=InputFieldSingle q1val=InputVal qryadditional=AdditionalQuery?)
	 */
	protected void sequence_GetStatements(ISerializationContext context, GetStatements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSONQueryModel returns JSONQueryModel
	 *
	 * Constraint:
	 *     inputStatement+=Statements+
	 */
	protected void sequence_JSONQueryModel(ISerializationContext context, JSONQueryModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InputVal returns StringLiteral
	 *     StringLiteral returns StringLiteral
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringLiteral(ISerializationContext context, StringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonQPackage.Literals.STRING_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonQPackage.Literals.STRING_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
