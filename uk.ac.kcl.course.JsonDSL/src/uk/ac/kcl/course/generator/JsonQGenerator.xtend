/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.course.generator

import java.util.List
import java.util.stream.Collectors
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.course.jsonQ.JSONQueryModel
import uk.ac.kcl.course.jsonQ.Statements
import uk.ac.kcl.course.jsonQ.StringLiteral
import uk.ac.kcl.course.jsonQ.GetStatements
import uk.ac.kcl.course.jsonQ.AggregateStatements
import uk.ac.kcl.course.jsonQ.AdditionalQuery

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class JsonQGenerator extends AbstractGenerator {
	
	var static int counter = 0 ;
	var List<String> jsonList = newArrayList

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as JSONQueryModel

		fsa.generateFile("JSONQueryMain" + '.java', model.doGenerateClass)
		initialize
	}
	
	def initialize(){
		counter=0;
		jsonList.clear
	}

	def String doGenerateClass(JSONQueryModel model) '''
		import java.util.Arrays;
		import java.util.List;
		
		import uk.ac.kcl.course.json_lib.JSONQueryProgram;
		import uk.ac.kcl.course.json_lib.dto.JSONQuery;
		import uk.ac.kcl.course.json_lib.dto.JSONQueryBuilder;
		
		
		
		public class JSONQueryMain {
		
			    public static void main(String[] args) {
					
					«model.inputStatement.map[generateJQ].join('\n')»
					List<JSONQuery> jsonList = Arrays.asList(«convertListToString»);
					JSONQueryProgram jsonProgram = new JSONQueryProgram(jsonList);
					System.out.println("JSOn:"+jsonProgram.toString());
				}
		}
	'''
	
	def String convertListToString(){
		var json = jsonList.stream.collect(Collectors.joining(','));
		json
	}
	
	dispatch def String generateJQ(Statements stmt)''''''
	dispatch def String generateJQ(GetStatements stmt){
		var jsonCount="json" + counter
	 	var str = stmt.q1val as StringLiteral
	 	var qa = stmt.qryadditional as AdditionalQuery
		var result = '''
				  JSONQuery «jsonCount»= new JSONQueryBuilder()
				        	.setOperationValue("«stmt.opGet.literal»")
				        	.setFirstQueryKey("«stmt.q1key.literal»")
				        	.setFirstQueryValue("«str.value»")
				        	«if (qa !== null) '''
				        	.setConnectorValue("«qa.connector»")
				        	.setSecondQueryKey("«qa.q2key.literal»")
				        	«var q2str = qa.q2val as StringLiteral»
				        	.setSecondQueryValue("«q2str.value»")
				        	'''»
				        	.build();
				        	
		'''
		counter++;
		jsonList.add(jsonCount)
		result;		
	}

	dispatch def String generateJQ(AggregateStatements stmt){
		var jsonCount="json" + counter
	 	var str = stmt.q1val as StringLiteral
	 	var qa = stmt.qryadditional as AdditionalQuery
		var result = '''
				  JSONQuery «jsonCount»= new JSONQueryBuilder()
				        	.setOperationValue("«stmt.opAgg.literal»")
				        	.setAggregateField("«stmt.aggField»")
				        	.setFirstQueryKey("«stmt.q1key.literal»")
				        	.setFirstQueryValue("«str.value»")
				        	«if (qa !== null) '''
				        	.setConnectorValue("«qa.connector»")
				        	.setSecondQueryKey("«qa.q2key.literal»")
				        	«var q2str = qa.q2val as StringLiteral»
				        	.setSecondQueryValue("«q2str.value»")
				        	'''»
				        	.build();
				        	
		'''
		counter++;
		jsonList.add(jsonCount)
		result;		
	}
	
//	def generateJQ(Statements st) {
//		var jsonCount="json" + counter
//	 
//		var result = '''
//
//				  JSONQuery «jsonCount»= new JSONQueryBuilder()
//				        	.setOperationValue("«st.operation.literal»")
//				        	.setFirstQueryKey("«st.q1key.getName»")
//				        	«val q1Value = st.q1val as StringLiteral»
//				        	.setFirstQueryValue("«q1Value.value»")
//				        	.setConnectorValue("«st.connector.get(0)»")
//				        	.setSecondQueryKey("«st.q2key.getName»")
//				        	«val q2Value = st.q2val as StringLiteral»
//				        	.setSecondQueryValue("«q2Value.value»")
//				        	.build();
//				        	
//		'''
//		counter++;
//		jsonList.add(jsonCount)
//		result;
//	}

}
