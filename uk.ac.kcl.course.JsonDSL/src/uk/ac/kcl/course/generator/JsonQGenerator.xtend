/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.course.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.course.jsonQ.JSONQueryModel
import uk.ac.kcl.course.jsonQ.Statements
import java.util.Iterator
import java.util.HashMap
import java.util.Map
import org.eclipse.xtext.build.IncrementalBuilder
import java.util.stream.Collectors
import java.util.List

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class JsonQGenerator extends AbstractGenerator {
	
	var static int counter = 0 ;
	var List<String> jsonList = newArrayList

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as JSONQueryModel

		val className = deriveClassName(resource)

		fsa.generateFile("JSONQueryMain" + '.java', model.doGenerateClass(className))
		initialize
	}
	
	def initialize(){
		counter=0;
		jsonList.clear
	}

	def String doGenerateClass(JSONQueryModel model, String className) '''
		import java.util.Arrays;
		import java.util.List;
		
		import uk.ac.kcl.course.json_lib.JSONQueryProgram;
		import uk.ac.kcl.course.json_lib.dto.JSONQuery;
		import uk.ac.kcl.course.json_lib.dto.JSONQueryBuilder;
		
		
		
		public class JSONQueryMain {
		
			    public static void main(String[] args) {
					
					«model.inputStatement.map[generateJQ3].join('\n')»
					List<JSONQuery> jsonList = Arrays.asList(«convertListToString»);
					JSONQueryProgram jsonProgram = new JSONQueryProgram(jsonList);
					System.out.println("JSOn:"+jsonProgram.toString());
				}
		}
	'''
	
	def String convertListToString(){
		var json = jsonList.stream.collect(Collectors.joining(','));
		json
	}

	def String generateJQ2(Iterator<Statements> statements) {
		//«model.eAllContents.filter(Statements).generateJQ2()»
		var result = "";
		while (statements.hasNext) {
			val st = statements.next as Statements;
			result = '''
				
					  JSONQuery json = new JSONQueryBuilder()
					        	.setOperationValue("«st.operation.literal»")
					        	.setFirstQueryKey("«st.q1key.getName»")
					        	«val q1Value = st.q1val as uk.ac.kcl.course.jsonQ.StringLiteral»
					        	.setFirstQueryValue("«q1Value.value»")
					        	.setConnectorValue("«st.connector.get(0)»")
					        	.setSecondQueryKey("«st.q2key.getName»")
					        	«val q2Value = st.q2val as uk.ac.kcl.course.jsonQ.StringLiteral»
					        	.setSecondQueryValue("«q2Value.value»")
					        	.build();
					        	
					
			'''
		}
		result

	}
	


	def generateJQ3(Statements st) {
		var jsonCount="json" + counter
	 
		var result = '''

				  JSONQuery «jsonCount»= new JSONQueryBuilder()
				        	.setOperationValue("«st.operation.literal»")
				        	.setFirstQueryKey("«st.q1key.getName»")
				        	«val q1Value = st.q1val as uk.ac.kcl.course.jsonQ.StringLiteral»
				        	.setFirstQueryValue("«q1Value.value»")
				        	.setConnectorValue("«st.connector.get(0)»")
				        	.setSecondQueryKey("«st.q2key.getName»")
				        	«val q2Value = st.q2val as uk.ac.kcl.course.jsonQ.StringLiteral»
				        	.setSecondQueryValue("«q2Value.value»")
				        	.build();
				        	
		'''
		counter++;
		jsonList.add(jsonCount)
		result;
	}

	def deriveClassName(Resource resource) {
		val origFilename = resource.URI.lastSegment
		origFilename.substring(0, origFilename.indexOf('.')) + 'MyDsl'
	}
}
